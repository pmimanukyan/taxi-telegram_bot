import my_classes
# python-telegram-bot
import logging

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

TARIFF, FROM, TO, RES = range(4)
data = []  # [class, from, to]


def start(update: Update, context: CallbackContext):
    """Starts the conversation and asks the user to choose a class of taxi."""
    reply_keyboard = [['Economy', 'Comfort', 'ComfortPLUS', 'Business', 'Minivan']]

    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å —Ç–∞–∫—Å–∏ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å:',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder='Class?'
        ),
    )
    return TARIFF


def from_(update: Update, context: CallbackContext):
    """Stores the selected class and asks for a route start address."""
    user = update.message.from_user
    data.append(update.message.text)
    logger.info("Tariff of %s: %s", user.first_name, update.message.text)
    if update.message.text == 'Business':
        update.message.reply_text(
            '–û, –Ω–∞ –¥–µ–ª–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É? üí∏Ô∏èü§µ‚Äç\n\n'
            '–û—Ç–∫—É–¥–∞ —Ç–µ–±—è –∑–∞–±—Ä–∞—Ç—å, —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ **–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º**',
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üòç\n\n'
            '–û—Ç–∫—É–¥–∞ —Ç–µ–±—è –∑–∞–±—Ä–∞—Ç—å? –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ **–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º**',
            reply_markup=ReplyKeyboardRemove(),
        )
    return FROM


def to_(update: Update, context: CallbackContext):
    """Stores the info about route taxi_class(tariff) and asks for a route start."""
    user = update.message.from_user
    logger.info("FROM: %s", update.message.text)
    data.append(update.message.text)
    update.message.reply_text(
        '–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–º—Å—è? –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! üòâ',
    )
    return TO


def res(update: Update, context: CallbackContext):
    """Checks data, finds results and ends the conversation."""
    yandextaxi_class_dict = {
        'Economy': 'econom',
        'Comfort': 'business',
        'ComfortPLUS': 'comfortplus',
        'Business': 'vip',
        'Minivan': 'minivan'
    }
    citymobil_class_dict = {
        'Economy': '–≠–∫–æ–Ω–æ–º',
        'Comfort': '–ö–æ–º—Ñ–æ—Ä—Ç',
        'ComfortPLUS': '–ö–æ–º—Ñ–æ—Ä—Ç+',
        'Business': '–ë–∏–∑–Ω–µ—Å',
        'Minivan': '–ú–∏–Ω–∏–≤—ç–Ω'
    }

    user = update.message.from_user
    logger.info("TO: %s", update.message.text)
    data.append(update.message.text)

    geocoder = my_classes.YandexGeocoderAPI.create_object()
    yandex_taxi = my_classes.YandexTaxiAPI.create_object()
    citymobil = my_classes.Citymobil(citymobil_class_dict[data[0]], data[1], data[2])

    update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ!\n\n'
    )
    update.message.reply_text(
        f'–ö–ª–∞—Å—Å - {data[0]}.\n'
        f'–ê–¥—Ä–µ—Å –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞ - {geocoder.get_correct_address(data[1])}.\n'
        f'–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - {geocoder.get_correct_address(data[2])}.\n'
    )
    update.message.reply_text(
        '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–π–¥–µ—à—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ, —Ç–æ —Ç–µ–±–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ –≤—Å—ë –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start'
        ' –∏ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (–∏–º–µ–Ω–Ω–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≤–≤–æ–¥–∞!!!)\n'
        '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ...\n'
    )

    list_ = yandex_taxi.get_price_time_distance(geocoder, yandextaxi_class_dict[data[0]], data[1], data[2])
    yandex_price = str(int(list_[0][:len(list_[0]) - 3])) + '—Ä'
    time = list_[1]
    distance = list_[2]

    citymobil_price = citymobil.get_price()
    update.message.reply_text(
        f'–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ - {time}\n'
        f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ - {distance}\n\n'
        f'–ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n'
        f'–Ø–Ω–¥–µ–∫—Å-—Ç–∞–∫—Å–∏ - {yandex_price}\n'
        f'–°–∏—Ç–º–æ–±–∏–ª - {citymobil_price}\n'
    )
    # checking for best agregator
    if int(yandex_price[:len(yandex_price) - 1]) <= int(citymobil_price[:len(citymobil_price) - 1]):
        best_agregator = '–Ø–Ω–¥–µ–∫—Å-—Ç–∞–∫—Å–∏'
    else:
        best_agregator = '–°–∏—Ç–∏–º–æ–±–∏–ª'

    update.message.reply_text(
        f'–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ {best_agregator}\n\n'
    )
    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext) -> int:
    """Cancels and ends the conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text(
        '–ü–æ–∫–∞ –¥—Ä—É–∂–∏—â–µ! –ù–∞–¥–µ—é—Å—å —è —Ç–µ–±–µ –ø–æ–º–æ–≥ –∏ —Ç—ã –µ—â—ë –≤–µ—Ä–Ω–µ—à—å—Å—è!', reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def main() -> None:
    """Run the bot."""
    # Creating the Updater with apikey from Botfather
    with open('botfather.txt', 'r') as f:
        apikey = f.read().splitlines()
    updater = Updater(*apikey)
    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Adding conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TARIFF: [MessageHandler(Filters.regex('^(Economy|Comfort|ComfortPLUS|Business|Minivan)$'), from_)],
            FROM: [MessageHandler(Filters.text & ~Filters.command, to_)],
            TO: [MessageHandler(Filters.text & ~Filters.command, res)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
